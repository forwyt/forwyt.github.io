<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2018/03/22/test/</url>
      <content type="html"><![CDATA[<pre class=" language-objc"><code class="language-objc">- (void)viewWillLayoutSubviews {
  [super viewWillLayoutSubviews];
  CGRect b = self.view.bounds;
  CGSize buttonSize = [self.button1 sizeThatFits:b.size];
  buttonSize.width += 20;
  buttonSize.height += 20;
  self.button1.bounds = CGRectMake(0, 0, buttonSize.width, buttonSize.height);
  self.button1.center = self.view.center;


  CGSize closeSize = [self.closeButton sizeThatFits:b.size];
  closeSize.width += 20;
  closeSize.height += 20;

  self.closeButton.bounds = CGRectMake(0, 0, closeSize.width, closeSize.height);
  self.closeButton.center = CGPointMake(self.button1.center.x, CGRectGetMaxY(b) - closeSize.height);
}

- (void)_showTransitionA {
  ToAnimationViewController *vc = [[ToAnimationViewController alloc] init];
  vc.transitioningDelegate = self;
  [self presentViewController:vc animated:YES completion:NULL];
}
</code></pre>
<pre class=" language-swift"><code class="language-swift"><span class="token operator">-</span> <span class="token punctuation">(</span>void<span class="token punctuation">)</span>viewWillLayoutSubviews <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillLayoutSubviews<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token builtin">CGRect</span> b <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
  <span class="token builtin">CGSize</span> buttonSize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>button1 sizeThatFits<span class="token punctuation">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>center<span class="token punctuation">;</span>


  <span class="token builtin">CGSize</span> closeSize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>closeButton sizeThatFits<span class="token punctuation">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token keyword">self</span><span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">CGRectGetMaxY</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>void<span class="token punctuation">)</span>_showTransitionA <span class="token punctuation">{</span>
  <span class="token builtin">ToAnimationViewController</span> <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">ToAnimationViewController</span> alloc<span class="token punctuation">]</span> <span class="token keyword">init</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  vc<span class="token punctuation">.</span>transitioningDelegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> presentViewController<span class="token punctuation">:</span>vc animated<span class="token punctuation">:</span><span class="token constant">YES</span> completion<span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> dom<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.d_table_body .title_inline>div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                    <span class="token keyword">let</span> tdom<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.d_table_total .title_inline dd'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                    <span class="token keyword">let</span> twidth<span class="token operator">=</span>j<span class="token operator">?</span>j<span class="token punctuation">.</span>clientWidth<span class="token punctuation">:</span><span class="token number">0</span>
                    <span class="token keyword">let</span> bwidth<span class="token operator">=</span>dom<span class="token operator">?</span>dom<span class="token punctuation">.</span>clientWidth<span class="token punctuation">:</span><span class="token number">0</span>
                    <span class="token keyword">let</span> total_width<span class="token operator">=</span>tdom<span class="token operator">?</span>tdom<span class="token punctuation">.</span>clientWidth<span class="token punctuation">:</span><span class="token number">0</span>
                    <span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span>twidth<span class="token punctuation">,</span>bwidth<span class="token punctuation">,</span>total_width<span class="token punctuation">]</span>

                    <span class="token keyword">let</span> rwidth<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> o<span class="token operator">&lt;</span>n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

                    j<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>rwidth<span class="token operator">+</span><span class="token string">'px'</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">{</span>
                      dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>rwidth<span class="token operator">+</span><span class="token string">'px'</span>
                      tdom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>rwidth<span class="token operator">+</span><span class="token string">'px'</span>
                    <span class="token punctuation">}</span>
                      width<span class="token operator">+</span><span class="token operator">=</span>rwidth
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillLayoutSubviews <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillLayoutSubviews<span class="token punctuation">]</span><span class="token punctuation">;</span>
  CGRect b <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
  CGSize buttonSize <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>button1 sizeThatFits<span class="token operator">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>width <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>center<span class="token punctuation">;</span>


  CGSize closeSize <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>closeButton sizeThatFits<span class="token operator">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>width <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>height <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">CGRectGetMaxY</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>_showTransitionA <span class="token punctuation">{</span>
  ToAnimationViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ToAnimationViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
  vc<span class="token punctuation">.</span>transitioningDelegate <span class="token operator">=</span> self<span class="token punctuation">;</span>
  <span class="token punctuation">[</span>self presentViewController<span class="token operator">:</span>vc animated<span class="token operator">:</span>YES completion<span class="token operator">:</span>NULL<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">-</span> <span class="token punctuation">(</span>void<span class="token punctuation">)</span>viewWillLayoutSubviews <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillLayoutSubviews<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token constant">CGRect</span> b <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
  <span class="token constant">CGSize</span> buttonSize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>button1 sizeThatFits<span class="token symbol">:b</span><span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>center<span class="token punctuation">;</span>


  <span class="token constant">CGSize</span> closeSize <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>closeButton sizeThatFits<span class="token symbol">:b</span><span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  <span class="token keyword">self</span><span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">CGRectGetMaxY</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span>void<span class="token punctuation">)</span>_showTransitionA <span class="token punctuation">{</span>
  <span class="token constant">ToAnimationViewController</span> <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">ToAnimationViewController</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
  vc<span class="token punctuation">.</span>transitioningDelegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> presentViewController<span class="token symbol">:vc</span> animated<span class="token symbol">:YES</span> completion<span class="token symbol">:NULL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<pre class=" language-c"><code class="language-c"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillLayoutSubviews <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>super viewWillLayoutSubviews<span class="token punctuation">]</span><span class="token punctuation">;</span>
  CGRect b <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>bounds<span class="token punctuation">;</span>
  CGSize buttonSize <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>button1 sizeThatFits<span class="token punctuation">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  buttonSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> buttonSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center <span class="token operator">=</span> self<span class="token punctuation">.</span>view<span class="token punctuation">.</span>center<span class="token punctuation">;</span>


  CGSize closeSize <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>closeButton sizeThatFits<span class="token punctuation">:</span>b<span class="token punctuation">.</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>width <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  closeSize<span class="token punctuation">.</span>height <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>bounds <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
  self<span class="token punctuation">.</span>closeButton<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>button1<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token function">CGRectGetMaxY</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">-</span> closeSize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>_showTransitionA <span class="token punctuation">{</span>
  ToAnimationViewController <span class="token operator">*</span>vc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ToAnimationViewController alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
  vc<span class="token punctuation">.</span>transitioningDelegate <span class="token operator">=</span> self<span class="token punctuation">;</span>
  <span class="token punctuation">[</span>self presentViewController<span class="token punctuation">:</span>vc animated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods制作framework全解析]]></title>
      <url>/2018/03/19/Cocoapods%E5%88%B6%E4%BD%9Cframework%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="cocoapod制作framework详解以及常见问题"><a href="#cocoapod制作framework详解以及常见问题" class="headerlink" title="cocoapod制作framework详解以及常见问题"></a>cocoapod制作framework详解以及常见问题</h1><hr>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>创建名字为TestSDK的framework</p>
<blockquote>
<p>pod lib create TestSDK</p>
</blockquote>
<p>回答下面五个问题:<br>按照需要自行选择 推荐选择demo application <strong><em>YES</em></strong> 这样方便边写demo边进行调试</p>
<blockquote>
<p>What platform do you want to use?? [ iOS / macOS ]</p>
<p>What language do you want to use?? [ Swift / ObjC ]</p>
<p>Would you like to include a demo application with your library? [ Yes / No ]</p>
<p>Which testing frameworks will you use? [ Specta / Kiwi / None ]</p>
<p>Would you like to do view based testing? [ Yes / No ]</p>
<p>What is your class prefix?</p>
</blockquote>
<p>如果顺利的话 这个时候Xcode会自动打开一个项目工程如下图所示</p>
<p><img src="/2018/03/19/Cocoapods制作framework全解析/WX20180319-162552.png" alt="WX20180319-162552"></p>
<p>接下来就是详细描述一下podfile文件(这一个开发之中非常重要而且规则很多的地方</p>
<p><img src="/2018/03/19/Cocoapods制作framework全解析/WX20180319-163133.png" alt="WX20180319-163133"></p>
<p>把podspec文件打开成为一个ruby语言描述的,这样就可以语法高亮方便查看</p>
<pre><code>Pod::Spec.new do |s|
#项目名称
  s.name             = &#39;TestSDK&#39;
#项目版本号
  s.version          = &#39;0.1.0&#39;
#项目摘要
  s.summary          = &#39;A short description of TestSDK.&#39;
#项目简短描述
  s.description      = &#39;这里填写您的项目描述建议这个要比summary长,听说是有人出错在这里(⊙﹏⊙)b&#39;
#项目的主页
  s.homepage         = &#39;https://github.com/XXX/TestSDK&#39;
#sdk的图片 为了美可以设置, 
# s.screenshots     = &#39;www.example.com/screenshots_1&#39;, &#39;www.example.com/screenshots_2&#39;
#项目开源的许可证类型
s.license          = { :type =&gt; &#39;MIT&#39;, :file =&gt; &#39;LICENSE&#39; }
#项目的作者
s.author           = { &#39;XXX&#39; =&gt; &#39;XX@qq.com&#39; }
#源代码
s.source           = { :git =&gt; &#39;https://github.com/forwyt/TestSDK.git&#39;, :tag =&gt; s.version.to_s }
#设交媒体
# s.social_media_url = &#39;https://twitter.com/&lt;TWITTER_USERNAME&gt;&#39;
---------------------------------------------------------
#下面比较重要
#项目的最低支持版本
  s.ios.deployment_target = &#39;8.0&#39;
#项目的目录结构(总体上说我们将所有的文件都放在这里)
  s.source_files = &#39;TestSDK/Classes/**/*&#39;
#如果你需要用到 图片 或者很少人提到的 xib文件打包之后成为nib都是需要一个bundle指定路径
  # s.resource_bundles = {
  #   &#39;TestSDK&#39; =&gt; [&#39;TestSDK/Assets/*.png&#39;]
  # }
#公共头文件在这里
s.public_header_files = &#39;Pod/Classes/**/*.h&#39;
#如果你项目中自己使用到的系统库需要在这里添加
  s.frameworks = &#39;UIKit&#39;, &#39;MapKit&#39;
#依赖的第三方框架需要在这里添加
  s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 2.3&#39;
-------------------------------------------------------------
</code></pre><h2 id="验证以及git相关知识"><a href="#验证以及git相关知识" class="headerlink" title="验证以及git相关知识"></a>验证以及git相关知识</h2><p>当你开发完成之后,你需要在git的服务器上(这里以github说明,建立起你的开源库地址)</p>
<pre><code>git add remote xxx
</code></pre><pre><code>cd 项目层
</code></pre><pre><code>git add .
</code></pre><pre><code>git commit -m&quot;xxx&quot;
</code></pre><pre><code>git tag v0.1.0 (这里强烈建议大家一定按照步骤来 因为podspec里面如果是指定了0.1.0那么大家就0.1.0 一句话相互对应即可)

git push 

git push tags 需要将tags也都上传到服务器上
</code></pre><p>假如一切顺利 这个时候你的 项目源码和tag应该都是子github里面的</p>
<p>最后我们需要验证有没有错误</p>
<pre><code>pod lib lint xxx.podspec --allow warings(允许有黄色警告)如果不需要刻意不带
</code></pre><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>一般来说如果你不打算开源项目 sdk开发程序员会将自己的库封装好,头文件暴露出来,并且FQA写好这样就算是一个大体合格的framewoke</p>
<ul>
<li>手动打包<ul>
<li>手动打包的过程是非常机械且繁琐的,不仅你需要给开发人员真机库,还要有模拟器库,所以网上有非常多的教程教你先打第一个真机再打一个模拟器最后合并.这种机械化操作此处不细说</li>
</ul>
</li>
<li>框架打包<ul>
<li>在框架打包之前你需要安装一个库在你的mac</li>
<li><img src="/2018/03/19/Cocoapods制作framework全解析/WX20180319-173836.png" alt="WX20180319-173836"></li>
<li>pod package xxx.podspec –force(这个是强制清空之前打包的库) –a(默认是打包成framework 如果带a就是打包为.a)</li>
</ul>
</li>
</ul>
<h2 id="Bug问题"><a href="#Bug问题" class="headerlink" title="Bug问题"></a>Bug问题</h2><p>然而对于我们开发者来说以上的这是一个基本配置 </p>
<h4 id="1-如果我要设置header或者pch怎么办"><a href="#1-如果我要设置header或者pch怎么办" class="headerlink" title="==1.如果我要设置header或者pch怎么办?=="></a>==1.如果我要设置header或者pch怎么办?==</h4><p>CocoaPods里面,每一次进行打包,制作静态库的时候都会pod install命令<br>如果你写在系统自动生成的XXXX-prefix.pch</p>
<p>pod install之后会消失掉之前你写入的所有文件!! </p>
<p>那么我们假定我们sdk名字叫做WechatSDK,我们就创建一个header名为WechatSDK.h<br>之所以这么写是当别人导入你的framework的时候如果是按照以下格式</p>
<pre class=" language-swift"><code class="language-swift">#<span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token builtin">WechatSDK</span><span class="token operator">/</span><span class="token builtin">WechatSDK</span><span class="token punctuation">.</span>h<span class="token operator">></span>
</code></pre>
<p>这样非常的符合初用者的心态而且很专业</p>
<p><img src="/2018/03/19/Cocoapods制作framework全解析/WX20180319-171902.png" alt="WX20180319-171902"></p>
<p>自己定义一个module将里面的umbrella header指向这个自定义的WechatSDK.h,并且在pods- target -buid setting中 packing里 nodulemap未你自定的这个module这样导出的freamework就是非常规范的</p>
<h4 id="2-如果我想将-a-或者-framework-这种静态库直接打包进去那么我又该怎么做"><a href="#2-如果我想将-a-或者-framework-这种静态库直接打包进去那么我又该怎么做" class="headerlink" title="==2.如果我想将.a 或者,framework 这种静态库直接打包进去那么我又该怎么做?=="></a>==2.如果我想将.a 或者,framework 这种静态库直接打包进去那么我又该怎么做?==</h4><p>关于这个问题 可能是报错最多的在sdk开发中</p>
<pre><code>#这两个是我在实际开发中打包微信的.a 和 QQ 的framework
#首先就需要在podsepc里面指明路径
 s.ios.vendored_libraries = &#39;Example/Pods/WechatSDK/libWeChatSDK.a&#39;
 s.ios.vendored_frameworks =&#39;Example/Pods/TencentOpenAPI.framework&#39;
#其次是需要把微信和QQ所需要的系统库全部写明上去不需要带后缀不然会报错
 s.frameworks =  &#39;Security&#39;,&#39;SystemConfiguration&#39;,&#39;CoreTelephony&#39;
 s.libraries  = &#39;z&#39;,&#39;sqlite3.0&#39;,&#39;c++&#39;
</code></pre><p>可能会涉及到无法导入头文件,那么你可以在public header 一栏指出即可</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>关于发布的详细步骤网上很多 一句最后命令</p>
<p>pod trunk 便可以发布到cocoapods源</p>
<p><img src="/2018/03/19/Cocoapods制作framework全解析/WechatIMG30327.png" alt="WechatIMG30327"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>1.类似的目录图</p>
<pre class=" language-ruby"><code class="language-ruby">├── <span class="token constant">Example</span>
│   ├── <span class="token constant">Podfile</span>
│   ├── <span class="token constant">Podfile</span><span class="token punctuation">.</span>lock
│   ├── <span class="token constant">Pods</span>
│   │   ├── <span class="token constant">Headers</span>
│   │   ├── <span class="token constant">Local</span>\ <span class="token constant">Podspecs</span>
│   │   │   └── <span class="token constant">Test</span><span class="token punctuation">.</span>podspec<span class="token punctuation">.</span>json
│   │   ├── <span class="token constant">Manifest</span><span class="token punctuation">.</span>lock
│   │   ├── <span class="token constant">Pods</span><span class="token punctuation">.</span>xcodeproj
│   │   │   ├── project<span class="token punctuation">.</span>pbxproj
│   │   │   └── xcuserdata
│   │   │       └── jasonphd<span class="token punctuation">.</span>xcuserdatad
│   │   │           └── xcschemes
│   │   │               ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token punctuation">.</span>xcscheme
│   │   │               ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token punctuation">.</span>xcscheme
│   │   │               ├── <span class="token constant">Test</span><span class="token punctuation">.</span>xcscheme
│   │   │               └── xcschememanagement<span class="token punctuation">.</span>plist
│   │   └── <span class="token constant">Target</span>\ <span class="token constant">Support</span>\ <span class="token constant">Files</span>
│   │       ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span>
│   │       │   ├── <span class="token constant">Info</span><span class="token punctuation">.</span>plist
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>acknowledgements<span class="token punctuation">.</span>markdown
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>acknowledgements<span class="token punctuation">.</span>plist
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>dummy<span class="token punctuation">.</span>m
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>frameworks<span class="token punctuation">.</span>sh
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>resources<span class="token punctuation">.</span>sh
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token operator">-</span>umbrella<span class="token punctuation">.</span>h
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token punctuation">.</span>debug<span class="token punctuation">.</span>xcconfig
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token punctuation">.</span>modulemap
│   │       │   └── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Example</span><span class="token punctuation">.</span>release<span class="token punctuation">.</span>xcconfig
│   │       ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span>
│   │       │   ├── <span class="token constant">Info</span><span class="token punctuation">.</span>plist
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>acknowledgements<span class="token punctuation">.</span>markdown
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>acknowledgements<span class="token punctuation">.</span>plist
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>dummy<span class="token punctuation">.</span>m
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>frameworks<span class="token punctuation">.</span>sh
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>resources<span class="token punctuation">.</span>sh
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token operator">-</span>umbrella<span class="token punctuation">.</span>h
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token punctuation">.</span>debug<span class="token punctuation">.</span>xcconfig
│   │       │   ├── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token punctuation">.</span>modulemap
│   │       │   └── <span class="token constant">Pods</span><span class="token operator">-</span><span class="token constant">Test_Tests</span><span class="token punctuation">.</span>release<span class="token punctuation">.</span>xcconfig
│   │       └── <span class="token constant">Test</span>
│   │           ├── <span class="token constant">Info</span><span class="token punctuation">.</span>plist
│   │           ├── <span class="token constant">Test</span><span class="token operator">-</span>dummy<span class="token punctuation">.</span>m
│   │           ├── <span class="token constant">Test</span><span class="token operator">-</span>prefix<span class="token punctuation">.</span>pch
│   │           ├── <span class="token constant">Test</span><span class="token operator">-</span>umbrella<span class="token punctuation">.</span>h
│   │           ├── <span class="token constant">Test</span><span class="token punctuation">.</span>modulemap
│   │           └── <span class="token constant">Test</span><span class="token punctuation">.</span>xcconfig
│   ├── <span class="token constant">Test</span>
│   │   ├── <span class="token constant">Base</span><span class="token punctuation">.</span>lproj
│   │   │   ├── <span class="token constant">LaunchScreen</span><span class="token punctuation">.</span>storyboard
│   │   │   └── <span class="token constant">Main</span><span class="token punctuation">.</span>storyboard
│   │   ├── <span class="token constant">Images</span><span class="token punctuation">.</span>xcassets
│   │   │   └── <span class="token constant">AppIcon</span><span class="token punctuation">.</span>appiconset
│   │   │       └── <span class="token constant">Contents</span><span class="token punctuation">.</span>json
│   │   ├── <span class="token constant">Test</span><span class="token operator">-</span><span class="token constant">Info</span><span class="token punctuation">.</span>plist
│   │   ├── <span class="token constant">Test</span><span class="token operator">-</span><span class="token constant">Prefix</span><span class="token punctuation">.</span>pch
│   │   ├── en<span class="token punctuation">.</span>lproj
│   │   │   └── <span class="token constant">InfoPlist</span><span class="token punctuation">.</span>strings
│   │   ├── main<span class="token punctuation">.</span>m
│   │   ├── tAppDelegate<span class="token punctuation">.</span>h
│   │   ├── tAppDelegate<span class="token punctuation">.</span>m
│   │   ├── tViewController<span class="token punctuation">.</span>h
│   │   └── tViewController<span class="token punctuation">.</span>m
│   ├── <span class="token constant">Test</span><span class="token punctuation">.</span>xcodeproj
│   │   ├── project<span class="token punctuation">.</span>pbxproj
│   │   ├── project<span class="token punctuation">.</span>xcworkspace
│   │   │   └── contents<span class="token punctuation">.</span>xcworkspacedata
│   │   └── xcshareddata
│   │       └── xcschemes
│   │           └── <span class="token constant">Test</span><span class="token operator">-</span><span class="token constant">Example</span><span class="token punctuation">.</span>xcscheme
│   ├── <span class="token constant">Test</span><span class="token punctuation">.</span>xcworkspace
│   │   ├── contents<span class="token punctuation">.</span>xcworkspacedata
│   │   └── xcuserdata
│   │       └── jasonphd<span class="token punctuation">.</span>xcuserdatad
│   │           └── <span class="token constant">UserInterfaceState</span><span class="token punctuation">.</span>xcuserstate
│   └── <span class="token constant">Tests</span>
│       ├── <span class="token constant">Tests</span><span class="token operator">-</span><span class="token constant">Info</span><span class="token punctuation">.</span>plist
│       ├── <span class="token constant">Tests</span><span class="token operator">-</span><span class="token constant">Prefix</span><span class="token punctuation">.</span>pch
│       ├── <span class="token constant">Tests</span><span class="token punctuation">.</span>m
│       └── en<span class="token punctuation">.</span>lproj
│           └── <span class="token constant">InfoPlist</span><span class="token punctuation">.</span>strings
├── <span class="token constant">LICENSE</span>
├── <span class="token constant">README</span><span class="token punctuation">.</span>md
├── <span class="token constant">Test</span>
│   ├── <span class="token constant">Assets</span>
│   └── <span class="token constant">Classes</span>
│       └── <span class="token constant">ReplaceMe</span><span class="token punctuation">.</span>m
├── <span class="token constant">Test</span><span class="token punctuation">.</span>podspec
└── _Pods<span class="token punctuation">.</span>xcodeproj <span class="token operator">-</span><span class="token operator">></span> <span class="token constant">Example</span><span class="token operator">/</span><span class="token constant">Pods</span><span class="token operator">/</span><span class="token constant">Pods</span><span class="token punctuation">.</span>xcodeproj
</code></pre>
<p>2.几个有用的连接</p>
<p><a href="https://github.com/forwyt/EyuFacebook.git" target="_blank" rel="external">这是一个简单的封装Facebook的sdk演示demo sdk</a></p>
<p><a href="https://www.jianshu.com/p/8a7b9232cbab" target="_blank" rel="external">方便大家看流程找了个详细点的流程教学</a></p>
<p><strong><em>总结起来:<br>    我们把不同的功能模块放在不同的文件夹中，通过 podspec 进行配置，通过 podfile 进行引用，通过 pod package 进行打包</em></strong></p>
<p>由于framework上的coding比搭建项目多,可能还有部分以前遇到的问题现在忘记了,如果有什么问题欢迎向我留言提问.我将会全力帮你解答~</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods工作原理]]></title>
      <url>/2018/03/19/CocoaPods%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="CocoaPods工作原理"><a href="#CocoaPods工作原理" class="headerlink" title="CocoaPods工作原理"></a>CocoaPods工作原理</h1><p><img src="/2018/03/19/CocoaPods工作原理/logo.png" alt="logo"></p>
<h1 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a><strong>cocoapods</strong></h1><p> 在iOS开发中基本上每个人或多或少的都有接触使用过cocoapods,从2011年9月1日上线,cocoapod就深受开发者的喜爱,这种第三方包(库)管理工具就如同:</p>
<ul>
<li><p>Android–&gt;Gradle</p>
</li>
<li><p>Node.js–&gt;npm</p>
</li>
<li><p>python–&gt; pip</p>
</li>
</ul>
<p>这些包管理工具能够快速,高效的集成我们的第三方库. cocoapods是有Ruby来编写</p>
<h2 id="组成结构-pod-init"><a href="#组成结构-pod-init" class="headerlink" title="组成结构(pod init)"></a><strong>组成结构(pod init)</strong></h2><p>基于网上非常多如何安装cocoapod教程,这里不再描述cocoapods如何安装以及如何切换镜像源.</p>
<p> <strong>podfile</strong></p>
<p><img src="/2018/03/19/CocoaPods工作原理/WX20180319-103100.png" alt="WX20180319-103100"><br>podfile是cocoapods的约束描述,这种文件就是ruby的简写,其代码在实际运作中是进行翻译的</p>
<pre class=" language-ruby"><code class="language-ruby">source <span class="token string">'http://source.git'</span>
platform <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string">'8.0'</span>
target <span class="token string">'Demo'</span> <span class="token keyword">do</span>
pod <span class="token string">'AFNetworking'</span>
pod <span class="token string">'SDWebImage'</span>
pod <span class="token string">'Masonry'</span>
<span class="token keyword">end</span>
</code></pre>
<p><strong>第一步</strong> 定义类似以下几个方法</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># eval_pod.rb</span>
<span class="token variable">$hash_value</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token function">platform</span><span class="token punctuation">(</span>platform<span class="token punctuation">,</span> version<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token function">pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre>
<p>使用了全局变量hash_value存储podfile中那些指定的依赖库,</p>
<p><strong>第二步</strong> 读取代码</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># eval_pod.rb</span>
content <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read <span class="token string">'./Podfile'</span>
eval content
p <span class="token variable">$hash_value</span>
</code></pre>
<p><strong>第三步</strong> 读取了Podfile文件中的内容，并把它的内容当做字符串执行，最后打印hash_value的值</p>
<pre class=" language-ruby"><code class="language-ruby">ruby eval_pod<span class="token punctuation">.</span>rb
<span class="token punctuation">{</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"http://source.git"</span><span class="token punctuation">,</span> <span class="token string">"targets"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"Demo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"pods"</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">"AFNetworking"</span><span class="token punctuation">,</span> <span class="token string">"SDWebImage"</span><span class="token punctuation">,</span> <span class="token string">"Masonry"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>`这样我们就得到了基本上的podfile解析结果
</code></pre>
<h2 id="cocoapods实现-pod-install"><a href="#cocoapods实现-pod-install" class="headerlink" title="cocoapods实现(pod install)"></a><strong>cocoapods实现(pod install)</strong></h2><blockquote>
<p>podinstall 由command类派生出真正的父类 install</p>
</blockquote>
<p>install方法中有两个我们熟知:pod install/pod update</p>
<p>后者会无视podfile.lock文件重新对podfile文件进行类似第一部分解析</p>
<p>podfile中依赖是由cocoapod-core核心模块来完成</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">from_ruby</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> contents <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span>
  contents <span class="token operator">||</span><span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r:utf-8'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token symbol">:read</span><span class="token punctuation">)</span>

  podfile <span class="token operator">=</span> <span class="token constant">Podfile</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">begin</span>
      <span class="token function">eval</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span>to_s<span class="token punctuation">)</span>
    <span class="token keyword">rescue</span> <span class="token builtin">Exception</span> <span class="token operator">=</span><span class="token operator">></span> e
      message <span class="token operator">=</span> <span class="token string">"Invalid `<span class="token interpolation"><span class="token delimiter tag">#{</span>path<span class="token punctuation">.</span>basename<span class="token delimiter tag">}</span></span>` file: <span class="token interpolation"><span class="token delimiter tag">#{</span>e<span class="token punctuation">.</span>message<span class="token delimiter tag">}</span></span>"</span>
      <span class="token keyword">raise</span> <span class="token constant">DSLError</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> path<span class="token punctuation">,</span> e<span class="token punctuation">,</span> contents<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  podfile
<span class="token keyword">end</span>
</code></pre>
<p>导入DSL</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token constant">Pod</span>
  <span class="token keyword">class</span> <span class="token class-name">Podfile</span>
    <span class="token keyword">module</span> <span class="token constant">DSL</span>
      <span class="token keyword">def</span> <span class="token function">pod</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token operator">*</span>requirements<span class="token punctuation">)</span> <span class="token keyword">end</span>
      <span class="token keyword">def</span> <span class="token function">target</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
      <span class="token keyword">def</span> <span class="token function">platform</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
      <span class="token keyword">def</span> inhibit_all_warnings<span class="token operator">!</span> <span class="token keyword">end</span>
      <span class="token keyword">def</span> use_frameworks<span class="token operator">!</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token keyword">end</span>
      <span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token keyword">end</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre>
<blockquote>
<p>总结一下，CocoaPods对Podfile的解析与我们在前面做的手动解析Podfile的原理差不多，构建一个包含一些方法的上下文，然后直接执行eval方法将文件的内容当做代码来执行，这样只要Podfile中的数据是符合规范的，那么解析Podfile就是非常简单容易的。</p>
</blockquote>
<p>在install方法里面会出现一个resolve_dependencies类创建Analyzer实例对象</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">def</span> resolve_dependencies
  analyzer <span class="token operator">=</span> create_analyzer

  plugin_sources <span class="token operator">=</span> run_source_provider_hooks
  analyzer<span class="token punctuation">.</span>sources<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>plugin_sources<span class="token punctuation">)</span>

  <span class="token constant">UI</span><span class="token punctuation">.</span>section <span class="token string">'Updating local specs repositories'</span> <span class="token keyword">do</span>
    analyzer<span class="token punctuation">.</span>update_repositories
  <span class="token keyword">end</span> <span class="token keyword">if</span> repo_update<span class="token operator">?</span>

  <span class="token constant">UI</span><span class="token punctuation">.</span>section <span class="token string">'Analyzing dependencies'</span> <span class="token keyword">do</span>
    <span class="token function">analyze</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span>
    validate_build_configurations
    clean_sandbox
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre>
<p><strong>解决依赖</strong><br>我们开发中知道,如果你用xcode去简历一个framework最头疼的问题无异于,需要引入第三方库,一旦这个库封装的不好,可能导致在别人使用的时候导致冲突,但是cocoapods引入库处理的非常好</p>
<blockquote>
<p>CocoaPods为了解决Podfile中声明的依赖关系，使用了一个叫做Milinillo的依赖关系解决算法;但是，笔者在Google上并没有找到与这个算法相关的其他信息，推测是CocoaPods为了解决iOS中的依赖关系创造的算法。</p>
</blockquote>
<p>Milinillo算法的核心是回溯（Backtracking）以及向前检查（forward check），整个过程会追踪栈中的两个状态（依赖和可能性）。</p>
<p><strong>下载依赖</strong></p>
<pre class=" language-ruby"><code class="language-ruby">installer<span class="token punctuation">.</span>install_source_of_pod
<span class="token operator">|</span><span class="token operator">--</span> create_pod_installer
<span class="token operator">|</span>    `<span class="token operator">--</span> <span class="token constant">PodSourceInstaller</span><span class="token punctuation">.</span><span class="token keyword">new</span>
`<span class="token operator">--</span> podSourceInstaller<span class="token punctuation">.</span>install<span class="token operator">!</span>
    `<span class="token operator">--</span> download_source
       `<span class="token operator">--</span> <span class="token constant">Downloader</span><span class="token punctuation">.</span>download
           `<span class="token operator">--</span> <span class="token constant">Downloader</span><span class="token punctuation">.</span>download_request
               `<span class="token operator">--</span> <span class="token constant">Downloader</span><span class="token punctuation">.</span>download_source
                   <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">Downloader</span><span class="token punctuation">.</span>for_target
                   <span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">Downloader</span><span class="token punctuation">.</span>class_for_options
                   <span class="token operator">|</span>   `<span class="token operator">--</span> <span class="token constant">Git</span><span class="token operator">/</span><span class="token constant">HTTP</span><span class="token operator">/</span><span class="token constant">Mercurial</span><span class="token operator">/</span><span class="token constant">Subversion</span><span class="token punctuation">.</span><span class="token keyword">new</span>
                   <span class="token operator">|</span><span class="token operator">--</span> <span class="token constant">Git</span><span class="token operator">/</span><span class="token constant">HTTP</span><span class="token operator">/</span><span class="token constant">Mercurial</span><span class="token operator">/</span><span class="token constant">Subversion</span><span class="token punctuation">.</span>download
                   `<span class="token operator">--</span> <span class="token constant">Git</span><span class="token operator">/</span><span class="token constant">HTTP</span><span class="token operator">/</span><span class="token constant">Mercurial</span><span class="token operator">/</span><span class="token constant">Subversion</span><span class="token punctuation">.</span>download<span class="token operator">!</span>
                       `<span class="token operator">--</span> <span class="token constant">Git</span><span class="token punctuation">.</span>clone
</code></pre>
<h2 id="生成pods-xodeproj"><a href="#生成pods-xodeproj" class="headerlink" title="生成pods.xodeproj"></a>生成pods.xodeproj</h2><p>generate!方法<br>这个方法做了几件小事：<br>1.生成Pods.xcodeproj工程</p>
<p>2.将依赖中的文件加入工程</p>
<p>3.将依赖中的图书馆加入工程</p>
<p>4.设置目标依赖（Target Dependencies）<br>这几件事情都离不开CocoaPods的另一个组件Xcodeproj，<br>这是一个可以操作一个Xcode工程中的组以及文件的组件，<br>我们都知道对Xcode工程的修改大多数情况下都是<br>对一个名叫project.pbxproj的文件进行修改，<br>而Xcodeproj这个组件就是CocoaPods团队开发的用于操作这个文件的第三方库。</p>
<h2 id="生成工作区-workspace"><a href="#生成工作区-workspace" class="headerlink" title="生成工作区 workspace"></a>生成工作区 workspace</h2><p>使用Xcodeproj修改Copy Resource Script Phrase等设置.</p>
<p>保存project.pbxproj</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cocoapods是通过ruby来构成,首先分析podfile变成一个hash_value数组存放所有的依赖,然后通过构造对象解析器来对依赖进行细化,然后传递给下载器下载,最后通过调用xcode来生成podproj,最后调用copy resources脚本来生成一个工作区,就可以使用了😊</p>
<p><a href="https://draveness.me/cocoapods" target="_blank" rel="external">参考1</a></p>
<p><a href="https://cocoapods.org/" target="_blank" rel="external">参考2</a></p>
]]></content>
      
        
        <tags>
            
            <tag> cocoapod,原理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习编译原理(1)]]></title>
      <url>/2018/03/14/%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-1/</url>
      <content type="html"><![CDATA[<p>#编译原理</p>
<hr>
<p>##词法分析</p>
<ul>
<li><p><strong>编译器</strong></p>
<ul>
<li>将高级语言转换成机器代码</li>
<li><p>源程序-&gt;翻译器-&gt;中间程序-&gt;虚拟机-&gt;输出</p>
<p>问题:<br>1.编译器和解释器的区别</p>
<ul>
<li>编译器负责输入到机器码</li>
<li>解释器包含输出的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>正则表达式</strong></p>
<ul>
<li>e(空串)空属于正则表达式</li>
<li>对于任意一个c属于西格玛 c 是正则表达式</li>
<li>如果M / N 是正则表达式 那么有三种子情况    <ul>
<li>选择 M|N</li>
<li>连接 MN</li>
<li>闭包 M*</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>关键字与标识符</strong></p>
<ul>
<li>if/while这种 西格玛是ascii码 所以很好解释if属于正则表达式</li>
<li>标识符定义是以字母或者下划线开头后面跟多个0或者字母,数字下划线<ul>
<li>解释:(a-Az-Z_)是属于ascii码 第二个后面加上0-9十个数字 然后再依照0或者多个表示这就是一个keleen闭包 满足正则表达式</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>有限状态自动机</strong><br>  <img src="/2018/03/14/学习编译原理-1/1.png" alt="1"></p>
<ul>
<li>单向箭头表示的是起始点,西格玛 是可接受字母表,S是状态的集合,q0是起始状态,F是有两个圆圈的一个终结状态集合,德尔塔 是转义函数他是一个集合</li>
<li>NFA<ul>
<li>非确定的有限状态自动机 </li>
</ul>
</li>
<li>DFA<ul>
<li>确定的有限状态自动机<br><img src="/2018/03/14/学习编译原理-1/2.png" alt="2"></li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>自动生成流程</strong><br><strong>从正则(Thompson算法)–&gt;NFA(子集结构算法)–&gt;DFA(Hopcroft算法)–&gt;词法分析器</strong></p>
<ul>
<li>汤姆逊/黑客/算法 唯一没有博士学位的人拿到的图灵计算机大奖<img src="/2018/03/14/学习编译原理-1/3.png" alt="3"><br><img src="/assets/WX20180313-164347.png" alt=""></li>
<li>NFA转为DFA(子集结构算法)<ul>
<li><a href="http://blog.csdn.net/qq_23100787/article/details/50402643" target="_blank" rel="external">这里有一篇详细的讲解</a>关于是如何将NFA转化为DFA而且在此基础之上 结构算法的解析也有说明!    </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Hopcroft算法</strong></p>
<ul>
<li>称为等价类思想  <ul>
<li>第一步 将状态分为 普通和接受状态 A/N </li>
<li>通过任意一个元素将这个 A或者 N 切割为不能再细分的子集 最后确定统一状态及是 专为一个DNA 的最小化<br><img src="/2018/03/14/学习编译原理-1/4.png" alt="4"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>DFA代码表示</strong></p>
<ul>
<li>概念上是一个有向图  <ul>
<li><strong>转移表 有向图</strong><ul>
<li>注释: 所谓转移表就是讲可输入的情况m为列数.状态为行数,在横竖交错的地方如果满足状态则可以为1  其他的为不可接受状态,令可以画出DFA</li>
</ul>
</li>
<li><strong>最长匹配 尽可能的读取最长的字符串</strong><ul>
<li>最长匹配是根据压栈来计算假定字符串ifif其中包含了关键字if     <ul>
<li>栈首先存入初始状态0</li>
<li>读取第一个i 栈有两层 0 1</li>
<li>读取第二个f 栈会被清空 这个时候再读取i 栈一层 2(接受的状态)</li>
<li>在读取i 那么就是 2 3</li>
<li>再读取f 清空栈 23 存入4 这个时候是一个接受状态无论读取什么都会变成不可即收状态 这样就可以最长匹配</li>
</ul>
</li>
</ul>
</li>
<li><strong>跳转表</strong><ul>
<li>注释: 跳转表将每一个状态转为代码<br><img src="/2018/03/14/学习编译原理-1/5.png" alt="5"><br>表现效率很高 当读取uinicode的时候 可以分段执行 加载起来也减少内存消耗</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><ul>
<li><strong>语法分析器的任务</strong><ul>
<li>记号流–&gt;yu法分析器–&gt;语法树</li>
<li>syntax : 语法</li>
</ul>
</li>
<li><strong>上下文无关文法</strong><ul>
<li>乔姆斯基MIT语言学教授 数学建模研究自然语言<ul>
<li>3级文法 正则(词法)</li>
<li>2级文法 上下文无关(语法)</li>
<li>1级文法 上下文有关</li>
<li>0级文法 任意   </li>
</ul>
</li>
<li>形式化<ul>
<li>非终结符</li>
<li>终结符</li>
<li>开始符号<img src="/2018/03/14/学习编译原理-1/6.png" alt="6"></li>
</ul>
</li>
<li>推倒<ul>
<li>最左/右推倒 </li>
</ul>
</li>
</ul>
</li>
<li><strong>分析树二义性</strong><ul>
<li>分析树 passtree <img src="/2018/03/14/学习编译原理-1/7.png" alt="7"></li>
<li>二义性文法 给定文法G将句子可以推出S有两颗不同的树</li>
</ul>
</li>
<li><strong>自顶向下</strong><ul>
<li>通过压栈回溯 导致时间是线性增长</li>
<li>前看符号 避免回溯 </li>
</ul>
</li>
<li><strong>递归下降分析算法</strong><ul>
<li>预测分析<ul>
<li>分析高效</li>
<li>定位准确 诊断正确</li>
<li>GCC LLVM</li>
</ul>
</li>
<li>思路<ul>
<li>每个非终结符构造一个分析函数\</li>
<li>用前看符号来指导</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 底层/编译/C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LKimageKit--腾讯高性能图片开源项目]]></title>
      <url>/2018/03/07/LKimageKit-%E8%85%BE%E8%AE%AF%E9%AB%98%E6%80%A7%E8%83%BD%E5%9B%BE%E7%89%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="LKimageKit-gt-腾讯高性能图片处理框架"><a href="#LKimageKit-gt-腾讯高性能图片处理框架" class="headerlink" title="LKimageKit -&gt;腾讯高性能图片处理框架"></a>LKimageKit -&gt;腾讯高性能图片处理框架</h1><hr>
<ul>
<li><strong>分析demo</strong><ul>
<li>Demo由Appdelegate进入主程序mainviewController,在主控制器是一个collectionView,</li>
<li>Demo一共三个控制器第一个是基本用法第二个主要是多照片的加载处理第三个是为了高度定制进行演示的demo<ul>
<li>customerProperty</li>
<li>iamgeWall</li>
<li>OpyimizedImageWall</li>
<li>clear(清理缓存不存在控制器)</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="LKImageView"><a href="#LKImageView" class="headerlink" title="LKImageView"></a>LKImageView</h3><ul>
<li><p><strong>源码分析</strong></p>
</li>
<li><p>LKImageView<br>lkimageview是一个自定义UI控件 包含多种属性,以及对象方法</p>
</li>
<li><p><strong>快速使用</strong></p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">self</span><span class="token punctuation">.</span>imageView <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">LKImageView</span> alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span>遵守代理方法
<span class="token keyword">self</span><span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token constant">LKImageURLRequest</span> <span class="token operator">*</span> request <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">LKImageURLRequest</span> requestWithURL<span class="token punctuation">:</span>@<span class="token string">"你的图片URL"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span>将请求传递给imageview的属性
<span class="token keyword">self</span><span class="token punctuation">.</span>imageView<span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>
</code></pre>
</li>
<li><strong>属性说明</strong><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>将加载的图片是否渐进加载出来
request<span class="token punctuation">.</span>supportProgressive <span class="token operator">=</span> <span class="token constant">YES</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span>predrawEnabled默认是flase即直接使用原始图像。内部图像视图缩放图像移动和规模。<span class="token punctuation">(</span>由<span class="token constant">ImageIO</span>解码<span class="token punctuation">)</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>imageView1<span class="token punctuation">.</span>predrawEnabled <span class="token operator">=</span> <span class="token constant">YES</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span>其他部分属性请见源码
</code></pre>
</li>
<li><strong>整体分析</strong><br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180305_24.png" alt="Snip20180305_24"></li>
<li>从上图看有LKiageView / Facede / Delegate /LKImageViewEffect根据对应的方法可以找出对应的用途例如可以将 图片加载成功/失败/加载进行时的图片进行添加</li>
<li>遵守代理可以监听图片加载成功或者失败的方法</li>
<li>可以添加后期特效 变灰/模糊处理等</li>
</ul>
<hr>
<p><strong>Manager</strong><br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_6.png" alt="Snip20180307_6"><br>LKimageManger类中有yi个总manager来控制下载,配合以下辅助类</p>
<ul>
<li>LKImageLogManager //打印日志 设置打印优先级</li>
<li>LKImageDecoderManger</li>
<li>lkimagedecoder 解码类中只有一个方法就是<br>```ruby</li>
<li>(UIImage <em> _Nullable )imageFromData:(NSData </em> _Nullable)data request:(LKImageRequest <em> _Nullable)request error:(NSError *</em> _Nullable)error;</li>
</ul>
<pre><code>该方法是首先判断传入的data是否存在,如果不存在即不用处理,直接return nil;
如果data存在即进行下一步的解析,将request进行解析.
- image/io的知识补充
```ruby
//测试imageio支持的图片格式
CFArrayRef mysourceType = CGImageSourceCopyTypeIdentifiers();
CFShow(mysourceType);
//打印结果
&quot;public.jpeg&quot;,
&quot;public.png&quot;,
&quot;com.compuserve.gif&quot;,
&quot;com.canon.tif-raw-image&quot;,
&quot;com.adobe.raw-image&quot;,
&quot;com.dxo.raw-image&quot;,
&quot;com.canon.cr2-raw-image&quot;,
&quot;com.leafamerica.raw-image&quot;,
&quot;com.hasselblad.fff-raw-image&quot;,
&quot;com.hasselblad.3fr-raw-image&quot;,
&quot;com.nikon.raw-image&quot;,
&quot;com.nikon.nrw-raw-image&quot;,
&quot;com.pentax.raw-image&quot;,
&quot;com.samsung.raw-image&quot;,
&quot;com.sony.raw-image&quot;,
&quot;com.sony.sr2-raw-image&quot;,
&quot;com.sony.arw-raw-image&quot;,
&quot;com.epson.raw-image&quot;,
&quot;com.kodak.raw-image&quot;,
&quot;public.tiff&quot;,
&quot;public.jpeg-2000&quot;,
&quot;com.apple.atx&quot;,
&quot;org.khronos.astc&quot;,
&quot;org.khronos.ktx&quot;,
&quot;com.canon.crw-raw-image&quot;,
&quot;com.fuji.raw-image&quot;,
&quot;com.panasonic.raw-image&quot;,
&quot;com.panasonic.rw2-raw-image&quot;,
&quot;com.leica.raw-image&quot;,
&quot;com.leica.rwl-raw-image&quot;,
&quot;com.konicaminolta.raw-image&quot;,
&quot;com.olympus.sr-raw-image&quot;,
&quot;com.olympus.or-raw-image&quot;,
&quot;com.olympus.raw-image&quot;,
&quot;com.phaseone.raw-image&quot;,
&quot;com.microsoft.ico&quot;,
&quot;com.microsoft.bmp&quot;,
&quot;com.apple.icns&quot;,
&quot;com.adobe.photoshop-image&quot;,
&quot;com.microsoft.cur&quot;,
&quot;com.truevision.tga-image&quot;,
&quot;com.ilm.openexr-image&quot;,
&quot;public.radiance&quot;,
&quot;public.pbm&quot;,
&quot;public.mpo-image&quot;,
&quot;public.pvr&quot;
//创建和使用imageSources
//从Image Sources中创建一个图像
当从Image Sources中创建图片时，可以提供一个index和dictionary（利用键值对）来创建一个缩略图或者是允许缓存。
在创建图片的时候，也需提供一个index值来索引图片，因为Image Sources中可能是多张图片，如果参数时0，那么只有一个图片。
</code></pre><p>创建一个方法 传入url返回cgimage</p>
<pre class=" language-swift"><code class="language-swift"><span class="token builtin">CGImageRef</span> <span class="token function">myCreateCGimageFromFile</span><span class="token punctuation">(</span><span class="token builtin">NSString</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token constant">NSURL</span> <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">NSURL</span> <span class="token builtin">URLWithString</span><span class="token punctuation">:</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">CGImageRef</span> image<span class="token punctuation">;</span>
<span class="token builtin">CGImageSourceRef</span> imageSource<span class="token punctuation">;</span>
<span class="token builtin">CFDictionaryRef</span> imageOptions<span class="token punctuation">;</span>
<span class="token builtin">CFStringRef</span> imageKeys<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">CFTypeRef</span> imageValues<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//缓存键值对</span>
imageKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">kCGImageSourceShouldCache</span><span class="token punctuation">;</span>
imageValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">CFTypeRef</span><span class="token punctuation">)</span> <span class="token constant">kCFBooleanFalse</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//float-point键值对</span>
imageKeys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">kCGImageSourceShouldAllowFloat</span><span class="token punctuation">;</span>
imageValues<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">CFTypeRef</span><span class="token punctuation">)</span><span class="token constant">kCFBooleanTrue</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//获取dictionary</span>
imageOptions <span class="token operator">=</span> <span class="token function">CFDictionaryCreate</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>const void <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>imageKeys<span class="token punctuation">,</span> <span class="token punctuation">(</span>const void <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>imageValues<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">kCFTypeDictionaryKeyCallBacks</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token constant">kCFTypeDictionaryValueCallBacks</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
imageSource <span class="token operator">=</span> <span class="token function">CGImageSourceCreateWithURL</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">CFURLRef</span><span class="token punctuation">)</span>url<span class="token punctuation">,</span> imageOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">CFRelease</span><span class="token punctuation">(</span>imageOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>imageSource <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
image <span class="token operator">=</span> <span class="token function">CGImageSourceCreateImageAtIndex</span><span class="token punctuation">(</span>imageSource<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> image<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后接着处理,就是一些业务逻辑任务,例如需要遮罩图层与否,需要缓存,或者<br>一些demo业务逻辑不做更多说明</p>
<hr>
<p><strong>LoaderManager</strong><br>LKimageKit的核心业务就是在LoaderManager中因为在sdk的readme中是如下说明:</p>
<ul>
<li><p>支持取消</p>
</li>
<li><p>支持请求合并</p>
</li>
<li><p>支持渐进式加载</p>
</li>
<li><p>支持优先级</p>
</li>
<li><p>支持先加载小图再加载大图</p>
</li>
<li><p>支持预加载、预解码</p>
</li>
<li><p>线程安全</p>
</li>
<li><p>调度、解码、加载、处理使用独立线程、且有并发控制</p>
</li>
<li><p>高度模块化，可由开发者自定义各部分模块</p>
</li>
</ul>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> <span class="token constant">NSOperationQueue</span> <span class="token operator">*</span>queue<span class="token punctuation">;</span>
<span class="token variable">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> dispatch_semaphore_t semaphore<span class="token punctuation">;</span>
</code></pre>
<h2 id="可以看出NSOpreation处理多线程-GCD来控制更高一次层的多信号量并发问题"><a href="#可以看出NSOpreation处理多线程-GCD来控制更高一次层的多信号量并发问题" class="headerlink" title="可以看出NSOpreation处理多线程,GCD来控制更高一次层的多信号量并发问题."></a>可以看出NSOpreation处理多线程,GCD来控制更高一次层的多信号量并发问题.</h2><p><strong>GCD</strong><br>dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是</p>
<p>dispatch_semaphore_create，dispatch_semaphore_signal，dispatch_semaphore_wait。</p>
<p>下面我们逐一介绍三个函数：</p>
<ul>
<li>1.dispatch_semaphore_create的声明为：</li>
</ul>
<p>　　dispatch_semaphore_t dispatch_semaphore_create(long value);<br>　　<br>　　传入的参数为long，输出一个dispatch_semaphore_t类型且值为value的信号量。<br>　　<br>　　值得注意的是，这里的传入的参数value必须大于或等于0，否则dispatch_semaphore_create会返回NULL。<br>　　<br>　　（关于信号量，我就不在这里累述了，网上很多介绍这个的。我们这里主要讲一下dispatch_semaphore这三个函数的用法）。
　　</p>
<ul>
<li>2.dispatch_semaphore_signal的声明为:long dispatch_semaphore_signal(dispatch_semaphore_t dsema)这个函数会使传入的信号量dsema的值加1；（至于返回值，待会儿再讲）
　　
　　</li>
<li>3.dispatch_semaphore_wait的声明为：<br>　　<br>　　long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)；<br>　　<br>　　这个函数会使传入的信号量dsema的值减1；<br>　　<br>　　这个函数的作用是这样的，如果dsema信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；<br>　　<br>　　如果desema的值为0，那么这个函数就阻塞当前线程等待timeout（注意timeout的类型为dispatch_time_t，<br>　　<br>　　不能直接传入整形或float型数），如果等待的期间desema的值被dispatch_semaphore_signal函数加1了，<br>　　<br>　　且该函数（即dispatch_semaphore_wait）所处线程获得了信号量，那么就继续向下执行并将信号量减1。<br>　　<br>　　如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。
　　
　　
　　</li>
<li>4.dispatch_semaphore_signal的返回值为long类型，当返回值为0时表示当前并没有线程等待其处理的信号量，其处理<br>　　<br>　　的信号量的值加1即可。当返回值不为0时，表示其当前有（一个或多个）线程等待其处理的信号量，并且该函数唤醒了一<br>　　<br>　　个等待的线程（当线程有优先级时，唤醒优先级最高的线程；否则随机唤醒）。<br>　　<br>　　dispatch_semaphore_wait的返回值也为long型。当其返回0时表示在timeout之前，该函数所处的线程被成功唤醒。<br>　　<br>　　当其返回不为0时，表示timeout发生。
　　
　　</li>
<li>5.在设置timeout时，比较有用的两个宏：DISPATCH_TIME_NOW 和 DISPATCH_TIME_FOREVER。<br>　　<br>　　DISPATCH_TIME_NOW　　表示当前；<br>　　<br>　　DISPATCH_TIME_FOREVER　　表示遥远的未来；<br>　　<br>　　一般可以直接设置timeout为这两个宏其中的一个，或者自己创建一个dispatch_time_t类型的变量。<br>　　<br>　　创建dispatch_time_t类型的变量有两种方法，dispatch_time和dispatch_walltime。<br>　　<br>　　利用创建dispatch_time创建dispatch_time_t类型变量的时候一般也会用到这两个变量。<br>　　<br>　　dispatch_time的声明如下：<br>　　<br>　　dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)；<br>　　<br>　　其参数when需传入一个dispatch_time_t类型的变量，和一个delta值。表示when加delta时间就是timeout的时间。<br>　　<br>　　例如：dispatch_time_t t = dispatch_time(DISPATCH_TIME_NOW, 1<em>1000</em>1000*1000);<br>　　<br>　　　　　　　表示当前时间向后延时一秒为timeout的时间。</li>
<li>6.关于信号量，一般可以用停车来比喻。停车场剩余4个车位，那么即使同时来了四辆车也能停的下。如果此时来了五辆车，那么就有一辆需要等待。信号量的值就相当于剩余车位的数目，dispatch_semaphore_wait函数就相当于来了一辆车，dispatch_semaphore_signal.就相当于走了一辆车。停车位的剩余数目在初始化的时候就已经指明了（dispatch_semaphore_create（long value）），调用一次dispatch_semaphore_signal，剩余的车位就增加一个；调用一次dispatch_semaphore_wait剩余车位就减少一个；当剩余车位为0时，再来车（即调用dispatch_semaphore_wait）就只能等待。有可能同时有几辆车等待一个停车位。有些车主没有耐心，给自己设定了一段等待时间，这段时间内等不到停车位就走了，如果等到了就开进去停车。而有些车主就像把车停在这，所以就一直等下去。
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　</li>
</ul>
<hr>
<p><strong>瀑布流</strong></p>
<ul>
<li>快速使用<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">,</span> strong<span class="token punctuation">)</span> <span class="token constant">NSMutableArray</span><span class="token operator">&lt;</span><span class="token constant">ExampleImageURLRequest</span><span class="token operator">*</span><span class="token operator">></span> <span class="token operator">*</span>preloadRequests<span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">/</span>定义一个泛型数组 规定数组里存放着 request
</code></pre>
<img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_3.png" alt="Snip20180307_3"><br>在生命周期中<br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_4.png" alt="Snip20180307_4"><br>在视图控制器加载之前做一个预处理机制,将请求优先加载<br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_5.png" alt="Snip20180307_5"><br>当视图控制器加载出来之后就可以 取消掉这些请求从而加快图片的展示.</li>
</ul>
<p>🍺<br>以上就是LKImageKit的简单解析,大致上是基于imageIO封装,支持自定义模块比较多,是开发中除了SDWebImage之外的又一个不错的图片框架,上手很简单,祝您使用开心 🎉</p>
<p>iOS developer – JasonPHD</p>
<p>　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　</p>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[易娱GameSDK接入文档说明]]></title>
      <url>/2017/09/29/%E6%98%93%E5%A8%B1GameSDK%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="EyuGameSDK-v-2-0-接入文档说明"><a href="#EyuGameSDK-v-2-0-接入文档说明" class="headerlink" title="#EyuGameSDK(v.2.0)接入文档说明"></a>#EyuGameSDK(v.2.0)接入文档说明</h2><h3 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h3><p><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_4.png" alt="Snip20170918_4"></p>
<ul>
<li>EyuGameSDK.a</li>
<li>静态库 包含微信 QQ第三方授权登录sdk</li>
<li>使用了MBHUD</li>
<li>EyuGameSDKResource.bundle</li>
<li>包含icon对应的image</li>
<li>xib/storyboard打包之后变成的nib</li>
</ul>
<h3 id="配置依赖库及其设置"><a href="#配置依赖库及其设置" class="headerlink" title="配置依赖库及其设置"></a>配置依赖库及其设置</h3><ul>
<li><p>请按照下图的名单依次添加依赖库到项目中<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_3.png" alt="Snip20170918_3"></p>
</li>
<li><p>请在<strong>Targets</strong>(选中项目target)-&gt;<strong>build Setting</strong> -&gt;<strong>search paths</strong> -&gt;<strong>library search paths</strong>添加好libEyugamesdk.a的路径<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_6.png" alt="Snip20170918_6"></p>
</li>
<li><p>按照如图<strong>Targets(</strong>选中项目target)-&gt;<strong>info</strong> -&gt;<strong>url types</strong> 配置好根据您在微信开放平台,QQ开放平台申请的AppId和KEY<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_5.png" alt="Snip20170918_5"></p>
</li>
<li><p>配置白名单(由于国内的SDK需要支持 QQ 和 微信 第三方登录)打开info.plist文件添加对应的字段,可以右键点击info.plist文件open as sourcecode 将下列文字复制添加进去即可<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_9.png" alt="Snip20170918_9"></p>
</li>
</ul>
<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
&lt;string&gt;wechat&lt;/string&gt;
&lt;string&gt;mqqapi&lt;/string&gt;
&lt;string&gt;mqq&lt;/string&gt;
&lt;string&gt;weixin&lt;/string&gt;
&lt;string&gt;mqq&lt;/string&gt;
&lt;string&gt;mqqapi&lt;/string&gt;
&lt;string&gt;mqqOpensdkSSoLogin&lt;/string&gt;
&lt;string&gt;mqqconnect&lt;/string&gt;
&lt;string&gt;mqqopensdkdataline&lt;/string&gt;
&lt;string&gt;mqqopensdkgrouptribeshare&lt;/string&gt;
&lt;string&gt;mqqopensdkfriend&lt;/string&gt;
&lt;string&gt;mqqopensdkapi&lt;/string&gt;
&lt;string&gt;mqqopensdkapiV2&lt;/string&gt;
&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;
&lt;string&gt;mqzoneopensdk&lt;/string&gt;
&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;
&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;
&lt;string&gt;mqzone&lt;/string&gt;
&lt;string&gt;mqzonev2&lt;/string&gt;
&lt;string&gt;mqzoneshare&lt;/string&gt;
&lt;string&gt;wtloginqzone&lt;/string&gt;
&lt;string&gt;mqzonewx&lt;/string&gt;
&lt;string&gt;mqzoneopensdkapiV2&lt;/string&gt;
&lt;string&gt;mqzoneopensdkapi19&lt;/string&gt;
&lt;string&gt;mqzoneopensdkapi&lt;/string&gt;
&lt;string&gt;mqzoneopensdk&lt;/string&gt;
&lt;string&gt;weixin&lt;/string&gt;
&lt;string&gt;wtloginmqq2&lt;/string&gt;
&lt;/array&gt;
</code></pre><h3 id="开始接入"><a href="#开始接入" class="headerlink" title="开始接入"></a>开始接入</h3><ul>
<li>导入SDK的头文件<pre><code>#import &quot;EyuGameSDK/EyuGameSDKHeader.h&quot;
</code></pre></li>
<li>在<strong>Appdelegate</strong>中程序最早启动的地方加入初始化sdk的方法</li>
</ul>
<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
/*---------------初始化SDK--------------------------*/
[EyuGameSDK sharedInstance].isDebugEnable = YES;
[[EyuGameSDK sharedInstance] initializeEyuGameSDKWithAppID:@&quot;999&quot; andAppKey:@&quot;8ae9fb6ca6d439bbb00b8552472e5038&quot;];
/*--------------向QQ注册--------------------------*/
//QQ
[EyuLogin_QQ regitserQQToTencent];
/*--------------向微信注册---------------------*/
//weixin
[EyuLogin_WeChat WeChatRegister];
return YES;
}
</code></pre><ul>
<li>处理连接回调保证唤起第三方APP时候保证能接受到信息<pre><code>-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
NSLog(@&quot;--------url = %@-----&quot;,url);
NSString * urlstring = url.absoluteString;
NSLog(@&quot;urlstring = %@&quot;,urlstring);
if ([urlstring containsString:@&quot;tencent&quot;]) {
//QQ
return [TencentOAuth HandleOpenURL:url];
}
else if ([urlstring containsString:@&quot;wx&quot;]){
[EyuLogin_WeChat WeChatHandleOpenURL:url];
return YES;
}else{
return YES;
}
}
</code></pre></li>
<li>在需要登录窗的控制器 viewdidload 方法加入带登录视图的代码</li>
</ul>
<pre><code>[[EyuGameSDK sharedInstance]LoginWithView];
</code></pre><p><strong>🚀 成功</strong></p>
<p>Copyright © 2017广州易娱游戏科技有限公司 Copyright Holder All Rights Reserved.</p>
<hr>
<ul>
<li>如果是带视图的登录方式上面就已经完成SDK所需要的接入,下面详细分解一下sdk的架构和使用注意点</li>
</ul>
<ul>
<li>伞头文件为 EyuGameSDKHeader.h</li>
<li>EyuGameSDK.h 有四个模块:<strong>初始化模块,登录模块,游戏模块和充值模块</strong></li>
</ul>
<ul>
<li><p><strong><em>初始化模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_12.png" alt="Snip20170919_12"><br>需要传入与易娱发行后台分配的 APPID 和appkey</p>
</li>
<li><p><strong><em>登录模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_14.png" alt="Snip20170919_14"><br>总体分为三个平台<br>如果使用带视图的登录方式 对应的登录和退出方法如上图展示,如果使用的是非视图登录方式,您需要对登录模块中的子元素有一定的概念了解,依照平台对应的登录方法存在 不同的类里面.</p>
</li>
</ul>
<ul>
<li>_易娱平台(EyuLogin<em>Native)</em> :包含了匿名登录/账号密码登录/手机验证码登录</li>
<li>_微信(EyuLogin<em>WeChat)</em>:第三方授权机制</li>
<li>_QQ(EyuLogin<em>QQ)</em>:第三方授权机制</li>
</ul>
<ul>
<li><strong><em>游戏模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_13.png" alt="Snip20170919_13"><br>游戏模块中我们负责统计用户的角色账号统计,以及角色升级统计</li>
<li><strong><em>充值模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_16.png" alt="Snip20170919_16"><br>在这个模块中使用注意点是:苹果内购的申请,对应的计费点需要明确.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[welcom for fun]]></title>
      <url>/2017/09/29/Fun/</url>
      <content type="html"><![CDATA[<hr>
<p><img src="/2017/09/29/Fun/NASA.jpg" alt="NASA"><br> take a record of coding life and technology.<br> wish you have fun in here ! 🚀</p>
]]></content>
      
        
        <tags>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
