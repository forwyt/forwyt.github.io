<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[cocopod原理分析]]></title>
      <url>/2018/03/19/cocopod%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="CocoaPods工作原理-以及如何制作framework"><a href="#CocoaPods工作原理-以及如何制作framework" class="headerlink" title="CocoaPods工作原理,以及如何制作framework"></a>CocoaPods工作原理,以及如何制作framework</h1><p><img src="/2018/03/19/cocopod原理分析/logo.png" alt="logo"></p>
<h1 id="cocoapods"><a href="#cocoapods" class="headerlink" title="cocoapods"></a><strong>cocoapods</strong></h1><p> 在iOS开发中基本上每个人或多或少的都有接触使用过cocoapods,从2011年9月1日上线,cocoapod就深受开发者的喜爱,这种第三方包(库)管理工具就如同:</p>
<ul>
<li><p>Android–&gt;Gradle</p>
</li>
<li><p>Node.js–&gt;npm</p>
</li>
<li><p>python–&gt; pip</p>
</li>
</ul>
<p>这些包管理工具能够快速,高效的集成我们的第三方库. cocoapods是有Ruby来编写</p>
<h2 id="组成结构-pod-init"><a href="#组成结构-pod-init" class="headerlink" title="组成结构(pod init)"></a><strong>组成结构(pod init)</strong></h2><p>基于网上非常多如何安装cocoapod教程,这里不再描述cocoapods如何安装以及如何切换镜像源.</p>
<p> <strong>podfile</strong></p>
<p><img src="/2018/03/19/cocopod原理分析/WX20180319-103100.png" alt="WX20180319-103100"></p>
<p>podfile是cocoapods的约束描述,这种文件就是ruby的简写,其代码在实际运作中是进行翻译的<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">source <span class="string">'http://source.git'</span></div><div class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></div><div class="line"></div><div class="line">target <span class="string">'Demo'</span> <span class="keyword">do</span></div><div class="line">pod <span class="string">'AFNetworking'</span></div><div class="line">pod <span class="string">'SDWebImage'</span></div><div class="line">pod <span class="string">'Masonry'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><strong>第一步</strong> 定义类似以下几个方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eval_pod.rb</span></div><div class="line">$hash_value = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">(url)</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">(target)</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">platform</span><span class="params">(platform, version)</span></span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pod</span><span class="params">(pod)</span></span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>使用了全局变量hash_value存储podfile中那些指定的依赖库,</p>
<p><strong>第二步</strong> 读取代码</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eval_pod.rb</span></div><div class="line">content = File.read <span class="string">'./Podfile'</span></div><div class="line">eval content</div><div class="line">p $hash_value</div></pre></td></tr></table></figure>
<p><strong>第三步</strong> 读取了Podfile文件中的内容，并把它的内容当做字符串执行，最后打印hash_value的值<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ruby eval_pod.rb</div><div class="line">&#123;<span class="string">"source"</span>=&gt;<span class="string">"http://source.git"</span>, <span class="string">"targets"</span>=&gt;[<span class="string">"Demo"</span>], <span class="string">"pods"</span>=&gt;[<span class="string">"AFNetworking"</span>, <span class="string">"SDWebImage"</span>, <span class="string">"Masonry"</span>]&#125;<span class="string">`这样我们就得到了基本上的podfile解析结果</span></div></pre></td></tr></table></figure></p>
<h2 id="cocoapods实现-pod-install"><a href="#cocoapods实现-pod-install" class="headerlink" title="cocoapods实现(pod install)"></a><strong>cocoapods实现(pod install)</strong></h2><blockquote>
<p>podinstall 由command类派生出真正的父类 install</p>
</blockquote>
<p>install方法中有两个我们熟知:pod install/pod update</p>
<p>后者会无视podfile.lock文件重新对podfile文件进行类似第一部分解析</p>
<p>podfile中依赖是由cocoapod-core核心模块来完成<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">from_ruby</span><span class="params">(path, contents = <span class="literal">nil</span>)</span></span></div><div class="line">  contents <span class="params">||</span>= File.open(path, <span class="string">'r:utf-8'</span>, &amp;<span class="symbol">:read</span>)</div><div class="line"></div><div class="line">  podfile = Podfile.new(path) <span class="keyword">do</span></div><div class="line">	<span class="keyword">begin</span></div><div class="line">	  eval(contents, <span class="literal">nil</span>, path.to_s)</div><div class="line">	<span class="keyword">rescue</span> Exception =&gt; e</div><div class="line">	  message = <span class="string">"Invalid `<span class="subst">#&#123;path.basename&#125;</span>` file: <span class="subst">#&#123;e.message&#125;</span>"</span></div><div class="line">	  raise DSLError.new(message, path, e, contents)</div><div class="line">	<span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line">  podfile</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>导入DSL<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Pod</span></span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Podfile</span></span></div><div class="line">	<span class="class"><span class="keyword">module</span> <span class="title">DSL</span></span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">pod</span><span class="params">(name = <span class="literal">nil</span>, *requirements)</span></span> <span class="keyword">end</span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">(name, options = <span class="literal">nil</span>)</span></span> <span class="keyword">end</span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">platform</span><span class="params">(name, target = <span class="literal">nil</span>)</span></span> <span class="keyword">end</span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">inhibit_all_warnings!</span> <span class="title">end</span></span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">use_frameworks!</span><span class="params">(flag = <span class="literal">true</span>)</span></span> <span class="keyword">end</span></div><div class="line">	  <span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">(source)</span></span> <span class="keyword">end</span></div><div class="line">	  ...</div><div class="line">	<span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>总结一下，CocoaPods对Podfile的解析与我们在前面做的手动解析Podfile的原理差不多，构建一个包含一些方法的上下文，然后直接执行eval方法将文件的内容当做代码来执行，这样只要Podfile中的数据是符合规范的，那么解析Podfile就是非常简单容易的。</p>
</blockquote>
<p>在install方法里面会出现一个resolve_dependencies类创建Analyzer实例对象</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve_dependencies</span></span></div><div class="line">  analyzer = create_analyzer</div><div class="line"></div><div class="line">  plugin_sources = run_source_provider_hooks</div><div class="line">  analyzer.sources.insert(<span class="number">0</span>, *plugin_sources)</div><div class="line"></div><div class="line">  UI.section <span class="string">'Updating local specs repositories'</span> <span class="keyword">do</span></div><div class="line">	analyzer.update_repositories</div><div class="line">  <span class="keyword">end</span> <span class="keyword">if</span> repo_update?</div><div class="line"></div><div class="line">  UI.section <span class="string">'Analyzing dependencies'</span> <span class="keyword">do</span></div><div class="line">	analyze(analyzer)</div><div class="line">	validate_build_configurations</div><div class="line">	clean_sandbox</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><strong>解决依赖</strong><br>我们开发中知道,如果你用xcode去简历一个framework最头疼的问题无异于,需要引入第三方库,一旦这个库封装的不好,可能导致在别人使用的时候导致冲突,但是cocoapods引入库处理的非常好</p>
<blockquote>
<p>CocoaPods为了解决Podfile中声明的依赖关系，使用了一个叫做Milinillo的依赖关系解决算法;但是，笔者在Google上并没有找到与这个算法相关的其他信息，推测是CocoaPods为了解决iOS中的依赖关系创造的算法。</p>
</blockquote>
<p>Milinillo算法的核心是回溯（Backtracking）以及向前检查（forward check），整个过程会追踪栈中的两个状态（依赖和可能性）。</p>
<p><strong>下载依赖</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">installer.install_source_of_pod</div><div class="line"><span class="params">|-- create_pod_installer</span></div><div class="line"><span class="params">|</span>	<span class="string">`-- PodSourceInstaller.new</span></div><div class="line"><span class="string">`</span>-- podSourceInstaller.install!</div><div class="line">	<span class="string">`-- download_source</span></div><div class="line"><span class="string">	   `</span>-- Downloader.download</div><div class="line">		   <span class="string">`-- Downloader.download_request</span></div><div class="line"><span class="string">			   `</span>-- Downloader.download_source</div><div class="line">				   <span class="params">|-- Downloader.for_target</span></div><div class="line"><span class="params">				   |</span>   <span class="params">|-- Downloader.class_for_options</span></div><div class="line"><span class="params">				   |</span>   <span class="string">`-- Git/HTTP/Mercurial/Subversion.new</span></div><div class="line"><span class="string">				   |-- Git/HTTP/Mercurial/Subversion.download</span></div><div class="line"><span class="string">				   `</span>-- Git/HTTP/Mercurial/Subversion.download!</div><div class="line">					   <span class="string">`-- Git.clone</span></div></pre></td></tr></table></figure></p>
<h2 id="生成pods-xodeproj"><a href="#生成pods-xodeproj" class="headerlink" title="生成pods.xodeproj"></a>生成pods.xodeproj</h2><p>generate!方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">这个方法做了几件小事：</div><div class="line"><span class="number">1</span>.生成Pods.xcodeproj工程</div><div class="line"><span class="number">2</span>.将依赖中的文件加入工程</div><div class="line"><span class="number">3</span>.将依赖中的图书馆加入工程</div><div class="line"><span class="number">4</span>.设置目标依赖（Target Dependencies）</div><div class="line">这几件事情都离不开CocoaPods的另一个组件Xcodeproj，</div><div class="line">这是一个可以操作一个Xcode工程中的组以及文件的组件，</div><div class="line">我们都知道对Xcode工程的修改大多数情况下都是</div><div class="line">对一个名叫project.pbxproj的文件进行修改，</div><div class="line">而Xcodeproj这个组件就是CocoaPods团队开发的用于操作这个文件的第三方库。</div></pre></td></tr></table></figure></p>
<h2 id="生成工作区-workspace"><a href="#生成工作区-workspace" class="headerlink" title="生成工作区 workspace"></a>生成工作区 workspace</h2><p>使用Xcodeproj修改Copy Resource Script Phrase等设置.</p>
<p>保存project.pbxproj</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>cocoapods是通过ruby来构成,首先分析podfile变成一个hash_value数组存放所有的依赖,然后通过构造对象解析器来对依赖进行细化,然后传递给下载器下载,最后通过调用xcode来生成podproj,最后调用copy resources脚本来生成一个工作区,就可以使用了😊</p>
<p><a href="https://draveness.me/cocoapods" target="_blank" rel="external">参考1</a></p>
<p><a href="https://cocoapods.org/" target="_blank" rel="external">参考2</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[学习编译原理(1)]]></title>
      <url>/2018/03/14/%E5%AD%A6%E4%B9%A0%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-1/</url>
      <content type="html"><![CDATA[<p>#编译原理</p>
<hr>
<p>##词法分析</p>
<ul>
<li><p><strong>编译器</strong></p>
<ul>
<li>将高级语言转换成机器代码</li>
<li><p>源程序-&gt;翻译器-&gt;中间程序-&gt;虚拟机-&gt;输出</p>
<p>问题:<br>1.编译器和解释器的区别</p>
<ul>
<li>编译器负责输入到机器码</li>
<li>解释器包含输出的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>正则表达式</strong></p>
<ul>
<li>e(空串)空属于正则表达式</li>
<li>对于任意一个c属于西格玛 c 是正则表达式</li>
<li>如果M / N 是正则表达式 那么有三种子情况    <ul>
<li>选择 M|N</li>
<li>连接 MN</li>
<li>闭包 M*</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>关键字与标识符</strong></p>
<ul>
<li>if/while这种 西格玛是ascii码 所以很好解释if属于正则表达式</li>
<li>标识符定义是以字母或者下划线开头后面跟多个0或者字母,数字下划线<ul>
<li>解释:(a-Az-Z_)是属于ascii码 第二个后面加上0-9十个数字 然后再依照0或者多个表示这就是一个keleen闭包 满足正则表达式</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>有限状态自动机</strong><br>  <img src="/2018/03/14/学习编译原理-1/1.png" alt="1"></p>
<ul>
<li>单向箭头表示的是起始点,西格玛 是可接受字母表,S是状态的集合,q0是起始状态,F是有两个圆圈的一个终结状态集合,德尔塔 是转义函数他是一个集合</li>
<li>NFA<ul>
<li>非确定的有限状态自动机 </li>
</ul>
</li>
<li>DFA<ul>
<li>确定的有限状态自动机<br><img src="/2018/03/14/学习编译原理-1/2.png" alt="2"></li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>自动生成流程</strong><br><strong>从正则(Thompson算法)–&gt;NFA(子集结构算法)–&gt;DFA(Hopcroft算法)–&gt;词法分析器</strong></p>
<ul>
<li>汤姆逊/黑客/算法 唯一没有博士学位的人拿到的图灵计算机大奖<img src="/2018/03/14/学习编译原理-1/3.png" alt="3"><br><img src="/assets/WX20180313-164347.png" alt=""></li>
<li>NFA转为DFA(子集结构算法)<ul>
<li><a href="http://blog.csdn.net/qq_23100787/article/details/50402643" target="_blank" rel="external">这里有一篇详细的讲解</a>关于是如何将NFA转化为DFA而且在此基础之上 结构算法的解析也有说明!    </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Hopcroft算法</strong></p>
<ul>
<li>称为等价类思想  <ul>
<li>第一步 将状态分为 普通和接受状态 A/N </li>
<li>通过任意一个元素将这个 A或者 N 切割为不能再细分的子集 最后确定统一状态及是 专为一个DNA 的最小化<br><img src="/2018/03/14/学习编译原理-1/4.png" alt="4"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>DFA代码表示</strong></p>
<ul>
<li>概念上是一个有向图  <ul>
<li><strong>转移表 有向图</strong><ul>
<li>注释: 所谓转移表就是讲可输入的情况m为列数.状态为行数,在横竖交错的地方如果满足状态则可以为1  其他的为不可接受状态,令可以画出DFA</li>
</ul>
</li>
<li><strong>最长匹配 尽可能的读取最长的字符串</strong><ul>
<li>最长匹配是根据压栈来计算假定字符串ifif其中包含了关键字if     <ul>
<li>栈首先存入初始状态0</li>
<li>读取第一个i 栈有两层 0 1</li>
<li>读取第二个f 栈会被清空 这个时候再读取i 栈一层 2(接受的状态)</li>
<li>在读取i 那么就是 2 3</li>
<li>再读取f 清空栈 23 存入4 这个时候是一个接受状态无论读取什么都会变成不可即收状态 这样就可以最长匹配</li>
</ul>
</li>
</ul>
</li>
<li><strong>跳转表</strong><ul>
<li>注释: 跳转表将每一个状态转为代码<br><img src="/2018/03/14/学习编译原理-1/5.png" alt="5"><br>表现效率很高 当读取uinicode的时候 可以分段执行 加载起来也减少内存消耗</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><ul>
<li><strong>语法分析器的任务</strong><ul>
<li>记号流–&gt;yu法分析器–&gt;语法树</li>
<li>syntax : 语法</li>
</ul>
</li>
<li><strong>上下文无关文法</strong><ul>
<li>乔姆斯基MIT语言学教授 数学建模研究自然语言<ul>
<li>3级文法 正则(词法)</li>
<li>2级文法 上下文无关(语法)</li>
<li>1级文法 上下文有关</li>
<li>0级文法 任意   </li>
</ul>
</li>
<li>形式化<ul>
<li>非终结符</li>
<li>终结符</li>
<li>开始符号<img src="/2018/03/14/学习编译原理-1/6.png" alt="6"></li>
</ul>
</li>
<li>推倒<ul>
<li>最左/右推倒 </li>
</ul>
</li>
</ul>
</li>
<li><strong>分析树二义性</strong><ul>
<li>分析树 passtree <img src="/2018/03/14/学习编译原理-1/7.png" alt="7"></li>
<li>二义性文法 给定文法G将句子可以推出S有两颗不同的树</li>
</ul>
</li>
<li><strong>自顶向下</strong><ul>
<li>通过压栈回溯 导致时间是线性增长</li>
<li>前看符号 避免回溯 </li>
</ul>
</li>
<li><strong>递归下降分析算法</strong><ul>
<li>预测分析<ul>
<li>分析高效</li>
<li>定位准确 诊断正确</li>
<li>GCC LLVM</li>
</ul>
</li>
<li>思路<ul>
<li>每个非终结符构造一个分析函数\</li>
<li>用前看符号来指导</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 底层/编译/C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LKimageKit--腾讯高性能图片开源项目]]></title>
      <url>/2018/03/07/LKimageKit-%E8%85%BE%E8%AE%AF%E9%AB%98%E6%80%A7%E8%83%BD%E5%9B%BE%E7%89%87%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="LKimageKit-gt-腾讯高性能图片处理框架"><a href="#LKimageKit-gt-腾讯高性能图片处理框架" class="headerlink" title="LKimageKit -&gt;腾讯高性能图片处理框架"></a>LKimageKit -&gt;腾讯高性能图片处理框架</h1><hr>
<ul>
<li><strong>分析demo</strong><ul>
<li>Demo由Appdelegate进入主程序mainviewController,在主控制器是一个collectionView,</li>
<li>Demo一共三个控制器第一个是基本用法第二个主要是多照片的加载处理第三个是为了高度定制进行演示的demo<ul>
<li>customerProperty</li>
<li>iamgeWall</li>
<li>OpyimizedImageWall</li>
<li>clear(清理缓存不存在控制器)</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="LKImageView"><a href="#LKImageView" class="headerlink" title="LKImageView"></a>LKImageView</h3><ul>
<li><p><strong>源码分析</strong></p>
</li>
<li><p>LKImageView<br>lkimageview是一个自定义UI控件 包含多种属性,以及对象方法</p>
</li>
<li><p><strong>快速使用</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.imageView = [[LKImageView alloc] init];</div><div class="line">/<span class="regexp">/遵守代理方法</span></div><div class="line"><span class="regexp">self.imageView.delegate = self;</span></div><div class="line"><span class="regexp">LKImageURLRequest * request = [LKImageURLRequest requestWithURL:@"你的图片URL"];</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/将请求传递给imageview的属性</span></div><div class="line"><span class="regexp">self.imageView.request = request;</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>属性说明</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/将加载的图片是否渐进加载出来</span></div><div class="line"><span class="regexp">request.supportProgressive = YES;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/predrawEnabled默认是flase即直接使用原始图像。内部图像视图缩放图像移动和规模。(由ImageIO解码)</span></div><div class="line"><span class="regexp">self.imageView1.predrawEnabled = YES;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/其他部分属性请见源码</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>整体分析</strong><br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180305_24.png" alt="Snip20180305_24"></p>
</li>
<li>从上图看有LKiageView / Facede / Delegate /LKImageViewEffect根据对应的方法可以找出对应的用途例如可以将 图片加载成功/失败/加载进行时的图片进行添加</li>
<li>遵守代理可以监听图片加载成功或者失败的方法</li>
<li>可以添加后期特效 变灰/模糊处理等</li>
</ul>
<hr>
<p><strong>Manager</strong><br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_6.png" alt="Snip20180307_6"><br>LKimageManger类中有yi个总manager来控制下载,配合以下辅助类</p>
<ul>
<li>LKImageLogManager //打印日志 设置打印优先级</li>
<li>LKImageDecoderManger</li>
<li>lkimagedecoder 解码类中只有一个方法就是<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (UIImage * _Nullable )<span class="symbol">imageFromData:</span>(NSData * _Nullable)data <span class="symbol">request:</span>(LKImageRequest * _Nullable)request <span class="symbol">error:</span>(NSError ** _Nullable)error;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>该方法是首先判断传入的data是否存在,如果不存在即不用处理,直接return nil;<br>如果data存在即进行下一步的解析,将request进行解析.</p>
<ul>
<li>image/io的知识补充<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/测试imageio支持的图片格式</span></div><div class="line"><span class="regexp">CFArrayRef mysourceType = CGImageSourceCopyTypeIdentifiers();</span></div><div class="line"><span class="regexp">CFShow(mysourceType);</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/打印结果</span></div><div class="line"><span class="regexp">"public.jpeg",</span></div><div class="line"><span class="regexp">"public.png",</span></div><div class="line"><span class="regexp">"com.compuserve.gif",</span></div><div class="line"><span class="regexp">"com.canon.tif-raw-image",</span></div><div class="line"><span class="regexp">"com.adobe.raw-image",</span></div><div class="line"><span class="regexp">"com.dxo.raw-image",</span></div><div class="line"><span class="regexp">"com.canon.cr2-raw-image",</span></div><div class="line"><span class="regexp">"com.leafamerica.raw-image",</span></div><div class="line"><span class="regexp">"com.hasselblad.fff-raw-image",</span></div><div class="line"><span class="regexp">"com.hasselblad.3fr-raw-image",</span></div><div class="line"><span class="regexp">"com.nikon.raw-image",</span></div><div class="line"><span class="regexp">"com.nikon.nrw-raw-image",</span></div><div class="line"><span class="regexp">"com.pentax.raw-image",</span></div><div class="line"><span class="regexp">"com.samsung.raw-image",</span></div><div class="line"><span class="regexp">"com.sony.raw-image",</span></div><div class="line"><span class="regexp">"com.sony.sr2-raw-image",</span></div><div class="line"><span class="regexp">"com.sony.arw-raw-image",</span></div><div class="line"><span class="regexp">"com.epson.raw-image",</span></div><div class="line"><span class="regexp">"com.kodak.raw-image",</span></div><div class="line"><span class="regexp">"public.tiff",</span></div><div class="line"><span class="regexp">"public.jpeg-2000",</span></div><div class="line"><span class="regexp">"com.apple.atx",</span></div><div class="line"><span class="regexp">"org.khronos.astc",</span></div><div class="line"><span class="regexp">"org.khronos.ktx",</span></div><div class="line"><span class="regexp">"com.canon.crw-raw-image",</span></div><div class="line"><span class="regexp">"com.fuji.raw-image",</span></div><div class="line"><span class="regexp">"com.panasonic.raw-image",</span></div><div class="line"><span class="regexp">"com.panasonic.rw2-raw-image",</span></div><div class="line"><span class="regexp">"com.leica.raw-image",</span></div><div class="line"><span class="regexp">"com.leica.rwl-raw-image",</span></div><div class="line"><span class="regexp">"com.konicaminolta.raw-image",</span></div><div class="line"><span class="regexp">"com.olympus.sr-raw-image",</span></div><div class="line"><span class="regexp">"com.olympus.or-raw-image",</span></div><div class="line"><span class="regexp">"com.olympus.raw-image",</span></div><div class="line"><span class="regexp">"com.phaseone.raw-image",</span></div><div class="line"><span class="regexp">"com.microsoft.ico",</span></div><div class="line"><span class="regexp">"com.microsoft.bmp",</span></div><div class="line"><span class="regexp">"com.apple.icns",</span></div><div class="line"><span class="regexp">"com.adobe.photoshop-image",</span></div><div class="line"><span class="regexp">"com.microsoft.cur",</span></div><div class="line"><span class="regexp">"com.truevision.tga-image",</span></div><div class="line"><span class="regexp">"com.ilm.openexr-image",</span></div><div class="line"><span class="regexp">"public.radiance",</span></div><div class="line"><span class="regexp">"public.pbm",</span></div><div class="line"><span class="regexp">"public.mpo-image",</span></div><div class="line"><span class="regexp">"public.pvr"</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/创建和使用imageSources</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/从Image Sources中创建一个图像</span></div><div class="line"><span class="regexp">当从Image Sources中创建图片时，可以提供一个index和dictionary（利用键值对）来创建一个缩略图或者是允许缓存。</span></div><div class="line"><span class="regexp">在创建图片的时候，也需提供一个index值来索引图片，因为Image Sources中可能是多张图片，如果参数时0，那么只有一个图片。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>创建一个方法 传入url返回cgimage<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="type">CGImageRef</span> myCreateCGimageFromFile(<span class="type">NSString</span> *path)&#123;</div><div class="line"><span class="type">NSURL</span> *url = [<span class="type">NSURL</span> <span class="type">URLWithString</span>:path];</div><div class="line"><span class="type">CGImageRef</span> image;</div><div class="line"><span class="type">CGImageSourceRef</span> imageSource;</div><div class="line"><span class="type">CFDictionaryRef</span> imageOptions;</div><div class="line"><span class="type">CFStringRef</span> imageKeys[<span class="number">2</span>];</div><div class="line"><span class="type">CFTypeRef</span> imageValues[<span class="number">2</span>];</div><div class="line"><span class="comment">//缓存键值对</span></div><div class="line">imageKeys[<span class="number">0</span>] = kCGImageSourceShouldCache;</div><div class="line">imageValues[<span class="number">0</span>] = (<span class="type">CFTypeRef</span>) kCFBooleanFalse;</div><div class="line"><span class="comment">//float-point键值对</span></div><div class="line">imageKeys[<span class="number">1</span>] = kCGImageSourceShouldAllowFloat;</div><div class="line">imageValues[<span class="number">1</span>] = (<span class="type">CFTypeRef</span>)kCFBooleanTrue;</div><div class="line"><span class="comment">//获取dictionary</span></div><div class="line">imageOptions = <span class="type">CFDictionaryCreate</span>(<span class="type">NULL</span>, (const void **)imageKeys, (const void **)imageValues, <span class="number">2</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</div><div class="line">imageSource = <span class="type">CGImageSourceCreateWithURL</span>((<span class="type">CFURLRef</span>)url, imageOptions);</div><div class="line"><span class="type">CFRelease</span>(imageOptions);</div><div class="line"><span class="keyword">if</span> (imageSource == <span class="type">NULL</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="type">NULL</span>;</div><div class="line">&#125;</div><div class="line">image = <span class="type">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class="number">0</span>, <span class="type">NULL</span>);</div><div class="line"><span class="keyword">return</span> image;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后接着处理,就是一些业务逻辑任务,例如需要遮罩图层与否,需要缓存,或者<br>一些demo业务逻辑不做更多说明</p>
<hr>
<p><strong>LoaderManager</strong><br>LKimageKit的核心业务就是在LoaderManager中因为在sdk的readme中是如下说明:</p>
<ul>
<li><p>支持取消</p>
</li>
<li><p>支持请求合并</p>
</li>
<li><p>支持渐进式加载</p>
</li>
<li><p>支持优先级</p>
</li>
<li><p>支持先加载小图再加载大图</p>
</li>
<li><p>支持预加载、预解码</p>
</li>
<li><p>线程安全</p>
</li>
<li><p>调度、解码、加载、处理使用独立线程、且有并发控制</p>
</li>
<li><p>高度模块化，可由开发者自定义各部分模块</p>
</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) NSOperationQueue *queue;</div><div class="line">@property (nonatomic, strong) dispatch_semaphore_t semaphore;</div></pre></td></tr></table></figure>
<h2 id="可以看出NSOpreation处理多线程-GCD来控制更高一次层的多信号量并发问题"><a href="#可以看出NSOpreation处理多线程-GCD来控制更高一次层的多信号量并发问题" class="headerlink" title="可以看出NSOpreation处理多线程,GCD来控制更高一次层的多信号量并发问题."></a>可以看出NSOpreation处理多线程,GCD来控制更高一次层的多信号量并发问题.</h2><p><strong>GCD</strong><br>dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是</p>
<p>dispatch_semaphore_create，dispatch_semaphore_signal，dispatch_semaphore_wait。</p>
<p>下面我们逐一介绍三个函数：</p>
<ul>
<li>1.dispatch_semaphore_create的声明为：</li>
</ul>
<p>　　dispatch_semaphore_t dispatch_semaphore_create(long value);<br>　　<br>　　传入的参数为long，输出一个dispatch_semaphore_t类型且值为value的信号量。<br>　　<br>　　值得注意的是，这里的传入的参数value必须大于或等于0，否则dispatch_semaphore_create会返回NULL。<br>　　<br>　　（关于信号量，我就不在这里累述了，网上很多介绍这个的。我们这里主要讲一下dispatch_semaphore这三个函数的用法）。
　　</p>
<ul>
<li>2.dispatch_semaphore_signal的声明为:long dispatch_semaphore_signal(dispatch_semaphore_t dsema)这个函数会使传入的信号量dsema的值加1；（至于返回值，待会儿再讲）
　　
　　</li>
<li>3.dispatch_semaphore_wait的声明为：<br>　　<br>　　long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)；<br>　　<br>　　这个函数会使传入的信号量dsema的值减1；<br>　　<br>　　这个函数的作用是这样的，如果dsema信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；<br>　　<br>　　如果desema的值为0，那么这个函数就阻塞当前线程等待timeout（注意timeout的类型为dispatch_time_t，<br>　　<br>　　不能直接传入整形或float型数），如果等待的期间desema的值被dispatch_semaphore_signal函数加1了，<br>　　<br>　　且该函数（即dispatch_semaphore_wait）所处线程获得了信号量，那么就继续向下执行并将信号量减1。<br>　　<br>　　如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。
　　
　　
　　</li>
<li>4.dispatch_semaphore_signal的返回值为long类型，当返回值为0时表示当前并没有线程等待其处理的信号量，其处理<br>　　<br>　　的信号量的值加1即可。当返回值不为0时，表示其当前有（一个或多个）线程等待其处理的信号量，并且该函数唤醒了一<br>　　<br>　　个等待的线程（当线程有优先级时，唤醒优先级最高的线程；否则随机唤醒）。<br>　　<br>　　dispatch_semaphore_wait的返回值也为long型。当其返回0时表示在timeout之前，该函数所处的线程被成功唤醒。<br>　　<br>　　当其返回不为0时，表示timeout发生。
　　
　　</li>
<li>5.在设置timeout时，比较有用的两个宏：DISPATCH_TIME_NOW 和 DISPATCH_TIME_FOREVER。<br>　　<br>　　DISPATCH_TIME_NOW　　表示当前；<br>　　<br>　　DISPATCH_TIME_FOREVER　　表示遥远的未来；<br>　　<br>　　一般可以直接设置timeout为这两个宏其中的一个，或者自己创建一个dispatch_time_t类型的变量。<br>　　<br>　　创建dispatch_time_t类型的变量有两种方法，dispatch_time和dispatch_walltime。<br>　　<br>　　利用创建dispatch_time创建dispatch_time_t类型变量的时候一般也会用到这两个变量。<br>　　<br>　　dispatch_time的声明如下：<br>　　<br>　　dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)；<br>　　<br>　　其参数when需传入一个dispatch_time_t类型的变量，和一个delta值。表示when加delta时间就是timeout的时间。<br>　　<br>　　例如：dispatch_time_t t = dispatch_time(DISPATCH_TIME_NOW, 1<em>1000</em>1000*1000);<br>　　<br>　　　　　　　表示当前时间向后延时一秒为timeout的时间。</li>
<li>6.关于信号量，一般可以用停车来比喻。停车场剩余4个车位，那么即使同时来了四辆车也能停的下。如果此时来了五辆车，那么就有一辆需要等待。信号量的值就相当于剩余车位的数目，dispatch_semaphore_wait函数就相当于来了一辆车，dispatch_semaphore_signal.就相当于走了一辆车。停车位的剩余数目在初始化的时候就已经指明了（dispatch_semaphore_create（long value）），调用一次dispatch_semaphore_signal，剩余的车位就增加一个；调用一次dispatch_semaphore_wait剩余车位就减少一个；当剩余车位为0时，再来车（即调用dispatch_semaphore_wait）就只能等待。有可能同时有几辆车等待一个停车位。有些车主没有耐心，给自己设定了一段等待时间，这段时间内等不到停车位就走了，如果等到了就开进去停车。而有些车主就像把车停在这，所以就一直等下去。
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　</li>
</ul>
<hr>
<p><strong>瀑布流</strong></p>
<ul>
<li>快速使用<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) NSMutableArray&lt;ExampleImageURLRequest*&gt; *preloadRequests;</div><div class="line">/<span class="regexp">/定义一个泛型数组 规定数组里存放着 request</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_3.png" alt="Snip20180307_3"><br>在生命周期中<br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_4.png" alt="Snip20180307_4"><br>在视图控制器加载之前做一个预处理机制,将请求优先加载<br><img src="/2018/03/07/LKimageKit-腾讯高性能图片开源项目/Snip20180307_5.png" alt="Snip20180307_5"><br>当视图控制器加载出来之后就可以 取消掉这些请求从而加快图片的展示.</p>
<p>🍺<br>以上就是LKImageKit的简单解析,大致上是基于imageIO封装,支持自定义模块比较多,是开发中除了SDWebImage之外的又一个不错的图片框架,上手很简单,祝您使用开心 🎉</p>
<p>iOS developer – JasonPHD</p>
<p>　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　　　</p>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[易娱GameSDK接入文档说明]]></title>
      <url>/2017/09/29/%E6%98%93%E5%A8%B1GameSDK%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="EyuGameSDK-v-2-0-接入文档说明"><a href="#EyuGameSDK-v-2-0-接入文档说明" class="headerlink" title="#EyuGameSDK(v.2.0)接入文档说明"></a>#EyuGameSDK(v.2.0)接入文档说明</h2><h3 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h3><p><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_4.png" alt="Snip20170918_4"></p>
<ul>
<li>EyuGameSDK.a</li>
<li>静态库 包含微信 QQ第三方授权登录sdk</li>
<li>使用了MBHUD</li>
<li>EyuGameSDKResource.bundle</li>
<li>包含icon对应的image</li>
<li>xib/storyboard打包之后变成的nib</li>
</ul>
<h3 id="配置依赖库及其设置"><a href="#配置依赖库及其设置" class="headerlink" title="配置依赖库及其设置"></a>配置依赖库及其设置</h3><ul>
<li><p>请按照下图的名单依次添加依赖库到项目中<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_3.png" alt="Snip20170918_3"></p>
</li>
<li><p>请在<strong>Targets</strong>(选中项目target)-&gt;<strong>build Setting</strong> -&gt;<strong>search paths</strong> -&gt;<strong>library search paths</strong>添加好libEyugamesdk.a的路径<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_6.png" alt="Snip20170918_6"></p>
</li>
<li><p>按照如图<strong>Targets(</strong>选中项目target)-&gt;<strong>info</strong> -&gt;<strong>url types</strong> 配置好根据您在微信开放平台,QQ开放平台申请的AppId和KEY<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_5.png" alt="Snip20170918_5"></p>
</li>
<li><p>配置白名单(由于国内的SDK需要支持 QQ 和 微信 第三方登录)打开info.plist文件添加对应的字段,可以右键点击info.plist文件open as sourcecode 将下列文字复制添加进去即可<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170918_9.png" alt="Snip20170918_9"></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;</div><div class="line">&lt;array&gt;</div><div class="line">&lt;string&gt;wechat&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqapi&lt;/string&gt;</div><div class="line">&lt;string&gt;mqq&lt;/string&gt;</div><div class="line">&lt;string&gt;weixin&lt;/string&gt;</div><div class="line">&lt;string&gt;mqq&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqapi&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqOpensdkSSoLogin&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqconnect&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkdataline&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkgrouptribeshare&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkfriend&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkapi&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkapiV2&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneopensdk&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;</div><div class="line">&lt;string&gt;mqqopensdkapiV3&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzone&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzonev2&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneshare&lt;/string&gt;</div><div class="line">&lt;string&gt;wtloginqzone&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzonewx&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneopensdkapiV2&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneopensdkapi19&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneopensdkapi&lt;/string&gt;</div><div class="line">&lt;string&gt;mqzoneopensdk&lt;/string&gt;</div><div class="line">&lt;string&gt;weixin&lt;/string&gt;</div><div class="line">&lt;string&gt;wtloginmqq2&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure>
<h3 id="开始接入"><a href="#开始接入" class="headerlink" title="开始接入"></a>开始接入</h3><ul>
<li><p>导入SDK的头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &quot;EyuGameSDK/EyuGameSDKHeader.h&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>在<strong>Appdelegate</strong>中程序最早启动的地方加入初始化sdk的方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">/*---------------初始化SDK--------------------------*/</div><div class="line">[EyuGameSDK sharedInstance].isDebugEnable = YES;</div><div class="line">[[EyuGameSDK sharedInstance] initializeEyuGameSDKWithAppID:@&quot;999&quot; andAppKey:@&quot;8ae9fb6ca6d439bbb00b8552472e5038&quot;];</div><div class="line">/*--------------向QQ注册--------------------------*/</div><div class="line">//QQ</div><div class="line">[EyuLogin_QQ regitserQQToTencent];</div><div class="line">/*--------------向微信注册---------------------*/</div><div class="line">//weixin</div><div class="line">[EyuLogin_WeChat WeChatRegister];</div><div class="line">return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>处理连接回调保证唤起第三方APP时候保证能接受到信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">-(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url</div><div class="line">&#123;</div><div class="line">NSLog(@&quot;--------url = %@-----&quot;,url);</div><div class="line">NSString * urlstring = url.absoluteString;</div><div class="line">NSLog(@&quot;urlstring = %@&quot;,urlstring);</div><div class="line">if ([urlstring containsString:@&quot;tencent&quot;]) &#123;</div><div class="line">//QQ</div><div class="line">return [TencentOAuth HandleOpenURL:url];</div><div class="line">&#125;</div><div class="line">else if ([urlstring containsString:@&quot;wx&quot;])&#123;</div><div class="line">[EyuLogin_WeChat WeChatHandleOpenURL:url];</div><div class="line">return YES;</div><div class="line">&#125;else&#123;</div><div class="line">return YES;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在需要登录窗的控制器 viewdidload 方法加入带登录视图的代码</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[EyuGameSDK sharedInstance]LoginWithView];</div></pre></td></tr></table></figure>
<p><strong>🚀 成功</strong></p>
<p>Copyright © 2017广州易娱游戏科技有限公司 Copyright Holder All Rights Reserved.</p>
<hr>
<ul>
<li>如果是带视图的登录方式上面就已经完成SDK所需要的接入,下面详细分解一下sdk的架构和使用注意点</li>
</ul>
<ul>
<li>伞头文件为 EyuGameSDKHeader.h</li>
<li>EyuGameSDK.h 有四个模块:<strong>初始化模块,登录模块,游戏模块和充值模块</strong></li>
</ul>
<ul>
<li><p><strong><em>初始化模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_12.png" alt="Snip20170919_12"><br>需要传入与易娱发行后台分配的 APPID 和appkey</p>
</li>
<li><p><strong><em>登录模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_14.png" alt="Snip20170919_14"><br>总体分为三个平台<br>如果使用带视图的登录方式 对应的登录和退出方法如上图展示,如果使用的是非视图登录方式,您需要对登录模块中的子元素有一定的概念了解,依照平台对应的登录方法存在 不同的类里面.</p>
</li>
</ul>
<ul>
<li>_易娱平台(EyuLogin<em>Native)</em> :包含了匿名登录/账号密码登录/手机验证码登录</li>
<li>_微信(EyuLogin<em>WeChat)</em>:第三方授权机制</li>
<li>_QQ(EyuLogin<em>QQ)</em>:第三方授权机制</li>
</ul>
<ul>
<li><strong><em>游戏模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_13.png" alt="Snip20170919_13"><br>游戏模块中我们负责统计用户的角色账号统计,以及角色升级统计</li>
<li><strong><em>充值模块</em></strong>:<br><img src="/2017/09/29/易娱GameSDK接入文档说明/Snip20170919_16.png" alt="Snip20170919_16"><br>在这个模块中使用注意点是:苹果内购的申请,对应的计费点需要明确.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[welcom for fun]]></title>
      <url>/2017/09/29/Fun/</url>
      <content type="html"><![CDATA[<hr>
<p><img src="/2017/09/29/Fun/NASA.jpg" alt="NASA"><br> take a record of coding life and technology.<br> wish you have fun in here ! 🚀</p>
]]></content>
      
        
        <tags>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
